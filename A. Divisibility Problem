A. Divisibility Problem
time limit per test1 second
memory limit per test256 megabytes
You are given two positive integers a
 and b
. In one move you can increase a
 by 1
 (replace a
 with a+1
). Your task is to find the minimum number of moves you need to do in order to make a
 divisible by b
. It is possible, that you have to make 0
 moves, as a
 is already divisible by b
. You have to answer t
 independent test cases.

Input
The first line of the input contains one integer t
 (1≤t≤104
) — the number of test cases. Then t
 test cases follow.

The only line of the test case contains two integers a
 and b
 (1≤a,b≤109
).

Output
For each test case print the answer — the minimum number of moves you need to do in order to make a
 divisible by b
.

Example
InputCopy
5
10 4
13 9
100 13
123 456
92 46
OutputCopy
2
5
4
333
0


Codeforces (c) Copyright 2010-2025 Mike Mirzayanov
import java.util.Scanner;

public class DivisibilityProblem {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        // Read the number of test cases
        int t = sc.nextInt();
        
        // Array to store results
        int[] results = new int[t];
        
        // Process each test case
        for (int i = 0; i < t; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            
            // Calculate the remainder
            int remainder = a % b;
            
            // If divisible, no moves are needed
            if (remainder == 0) {
                results[i] = 0;
            } else {
                // Minimum moves to make a divisible by b
                results[i] = b - remainder;
            }
        }
        
        // Output results
        for (int result : results) {
            System.out.println(result);
        }
        
        sc.close();
    }
}
