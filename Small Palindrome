Small Palindrome
Chef has 
X
X ones (
1
1s) and 
Y
Y twos (
2
2s) in his collection. He wants to arrange all of them into the smallest possible palindrome number
†
†
  using all of these ones (
1
1s) and twos (
2
2s).

Help Chef with the answer.

Note: 
X
X and 
Y
Y are both even numbers.

†
†
 A palindromic number is a number that remains the same when its digits are reversed.

Input Format
The first line of input will contain a single integer 
T
T, denoting the number of test cases.
The first and only line of each test case will contain two space-separated integers 
X
X, and 
Y
Y — the amount of ones (
1
1s) and twos (
2
2s) respectively.
Output Format
For each test case, output on a new line the smallest possible palindrome number using 
X
X ones (1s) and 
Y
Y twos (2s).

Constraints
1
≤
T
≤
50
1≤T≤50
0
≤
X
,
Y
≤
10
0≤X,Y≤10
X
X and 
Y
Y are both even
2
≤
X
+
Y
≤
10
2≤X+Y≤10
Sample 1:
Input
Output
2
2 0
2 2
11
1221
Explanation:
Test case 
1
1: The only palindrome number that can be formed using 
2
2 ones (
1
1s) is 
11
11.

Test case 
2
2: Two possible palindromic numbers can be formed using 
2
2 ones (
1
1s) and 
2
2 twos (
2
2s) which are 
1221
1221 and 
2112
2112.
The smaller palindromic number is 
1221
1221, so that is the answer for this case.
// Easy and logical question hai ye.
/*
    Ye to obvious hai ki smallest banane ke liye start mein 1 hona chahiye, 2 nahi.
    Hume palindrome ka bhi dhyaan rakhna hai.
    Pehle saare 1 daal lenge, phir saare 2.
    Ek start aur ek last mein jisse palindrome bana rahe.
    
    1 and 2 ka count even hone se kaam easy ho gaya hai.
*/

#include <bits/stdc++.h>
using namespace std;

int main() {
    // your code goes here
    int t;
    cin >> t;
    while (t--) {
        int x, y;
        cin >> x >> y;
        vector < long > v(x + y);   // Hume saare 1 and 2 use karna hai.
        int i = 0, j = x + y - 1;   // ek satrt se aur ek end se daale hai.
        
        // Pehle saare 1 daal liye.
        while (x > 0) {
            v[i] = 1;
            v[j] = 1;
            i++;
            j--;
            x -= 2;
        }
        
        // Phir saare 2 daal liye.
        while (y > 0) {
            v[i] = 2;
            v[j] = 2;
            i++;
            j--;
            y -= 2;
        }
        
        // Ab answer construct kar liye hai.
        long ans = 0;
        for (int i = 0; i < v.size(); i++) {
            ans = ans * 10 + v[i];
        }
        cout << ans << endl;
    }
}
