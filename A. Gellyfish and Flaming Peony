A. Gellyfish and Flaming Peony
time limit per test2 seconds
memory limit per test512 megabytes
Gellyfish hates math problems, but she has to finish her math homework:

Gellyfish is given an array of n
 positive integers a1,a2,…,an
.

She needs to do the following two-step operation until all elements of a
 are equal:

Select two indexes i
, j
 satisfying 1≤i,j≤n
 and i≠j
.
Replace ai
 with gcd(ai,aj)
.
Now, Gellyfish asks you for the minimum number of operations to achieve her goal.

It can be proven that Gellyfish can always achieve her goal.

Input
Each test contains multiple test cases. The first line contains the number of test cases t
 (1≤t≤5000
). The description of the test cases follows.

The first line of each test case contains a single integer n
 (1≤n≤5000
) — the length of the array.

The second line of each test case contains n
 integers a1,a2,…,an
 (1≤ai≤5000
) — the elements of the array.

It is guaranteed that the sum of n
 over all test cases does not exceed 5000
.

Output
For each test case, output a single integer — the minimum number of operations to achieve her goal.

Example
InputCopy
3
3
12 20 30
6
1 9 1 9 8 1
3
6 14 15
OutputCopy
4
3
3
Note
In the first test case, the following is a way that minimizes the number of operations:

Choose i=3
 and j=2
 and replace a3
 with gcd(a3,a2)=gcd(30,20)=10
, then a
 becomes [12,20,10]
.
Choose i=1
 and j=3
 and replace a1
 with gcd(a1,a3)=gcd(12,10)=2
, then a
 becomes [2,20,10]
.
Choose i=2
 and j=1
 and replace a2
 with gcd(a2,a1)=gcd(20,2)=2
, then a
 becomes [2,2,10]
.
Choose i=3
 and j=1
 and replace a3
 with gcd(a3,a1)=gcd(10,2)=2
, then a
 becomes [2,2,2]
.


#include <bits/stdc++.h>
using namespace std;

#define ll long long
#define vi vector<int>

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int t;
    cin >> t;
    
    while (t--) {
        int n;
        cin >> n;
        vi a(n);
        for (int i = 0; i < n; ++i) {
            cin >> a[i];
        }

        int g = a[0];
        for (int i = 1; i < n; ++i) {
            g = __gcd(g, a[i]);
        }

        int ops = 0;
        for (int i = 0; i < n; ++i) {
            if (a[i] != g) ops++;
        }

        cout << ops << '\n';
    }

    return 0;
}
