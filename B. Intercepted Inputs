B. Intercepted Inputs
time limit per test2 seconds
memory limit per test256 megabytes
To help you prepare for your upcoming Codeforces contest, Citlali set a grid problem and is trying to give you a n
 by m
 grid through your input stream. Specifically, your input stream should contain the following:

The first line contains two integers n
 and m
 — the dimensions of the grid.
The following n
 lines contain m
 integers each — the values of the grid.
However, someone has intercepted your input stream, shuffled all given integers, and put them all on one line! Now, there are k
 integers all on one line, and you don't know where each integer originally belongs. Instead of asking Citlali to resend the input, you decide to determine the values of n
 and m
 yourself.

Output any possible value of n
 and m
 that Citlali could have provided.

Input
The first line contains an integer t
 (1≤t≤104
) — the number of test cases.

The first line of each test case contains an integer k
 (3≤k≤2⋅105
) — the total number of inputs in your input stream.

The following line of each test case contains k
 integers a1,a2,…,ak
 (1≤ai≤k
) — the shuffled inputs of your input stream. It is guaranteed that n
 and m
 are contained within the k
 integers.

It is guaranteed that the sum of k
 over all test cases does not exceed 2⋅105
.

Output
For each test case, output two integers, one possible value of n
 and m
. If multiple possible answers exist, output any.

Example
InputCopy
5
3
1 1 2
11
3 3 4 5 6 7 8 9 9 10 11
8
8 4 8 3 8 2 8 1
6
2 1 4 5 3 3
8
1 2 6 3 8 5 5 3
OutputCopy
1 1
3 3
2 3
4 1
1 6
Note
In the first test case, the initial input could have been the following:

1 1

2

In the second test case, the initial input could have been the following:

3 3

4 5 6

7 8 9

9 10 11



import java.util.*;
public class X {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt(); // Number of test cases

        while (t-- > 0) {
            int k = scanner.nextInt(); // Total number of integers
            int[] arr = new int[k];
            for (int i = 0; i < k; i++) {
                arr[i] = scanner.nextInt();
            }

            // Use a HashSet for quick lookup
            Set<Integer> set = new HashSet<>();
            for (int num : arr) {
                set.add(num);
            }

            boolean found = false;

            // Find valid dimensions n, m such that n * m == k
            for (int n = 1; n * n <= k; n++) {
                if (k % n == 0) {
                    int m = k / n;
                    if (set.contains(n) && set.contains(m)) {
                        System.out.println(n + " " + m);
                        found = true;
                        break;
                    }
                }
            }

            // If no valid pair is found, output "-1 -1"
            if (!found) {
                System.out.println("-1 -1");
            }
        }

        scanner.close();
    }
}
